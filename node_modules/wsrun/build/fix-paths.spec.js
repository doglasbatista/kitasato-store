"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("jest");
const fix_paths_1 = require("./fix-paths");
const chalk_1 = require("chalk");
describe('fix paths', () => {
    it('works', () => {
        let res = fix_paths_1.fixPaths('/a/b/c', '/a/b/c/packages/p', 'Testing (src/test.ts:12)');
        expect(res).toEqual('Testing (packages/p/src/test.ts:12)');
    });
    it('works without brackets', () => {
        let res = fix_paths_1.fixPaths('/a/b/c', '/a/b/c/packages/p', 'Testing src/test.ts:12');
        expect(res).toEqual('Testing packages/p/src/test.ts:12');
    });
    it('does not do absolute paths', () => {
        let res = fix_paths_1.fixPaths('/a/b/c', '/a/b/c/packages/p', 'Testing /src/test.ts:12');
        expect(res).toEqual('Testing /src/test.ts:12');
    });
    it('ignores absolute paths that contain @', () => {
        let logLine = 'at (/Thing/src/node_modules/@h4bff/backend/src/rpc/serviceRegistry.ts:54:54)';
        let res = fix_paths_1.fixPaths('/Thing/src/', '/Thing/src/packages/app-lib-ca-backend', logLine);
        expect(res).toEqual(logLine);
    });
    it('does not do absolute paths without brackets', () => {
        let res = fix_paths_1.fixPaths('/a/b/c', '/a/b/c/packages/p', 'Testing /src/test.ts:12');
        expect(res).toEqual('Testing /src/test.ts:12');
    });
    it('applies relative paths', () => {
        let res = fix_paths_1.fixPaths('/a/b/c', '/a/b/c/packages/p', 'Testing ../src/test.ts:12');
        expect(res).toEqual('Testing packages/src/test.ts:12');
    });
    it('works with color codes', () => {
        let res = fix_paths_1.fixPaths('/a/b/c', '/a/b/c/packages/p', 'Testing ' + chalk_1.default.blue('src/test.ts:12'));
        expect(res).toEqual('Testing ' + chalk_1.default.blue('packages/p/src/test.ts:12'));
    });
    it('doesnt rewrite URLs', () => {
        let res = fix_paths_1.fixPaths('/a/b/c', '/a/b/c/packages/p', 'Testing http://src/test.ts');
        expect(res).toEqual('Testing http://src/test.ts');
    });
    it('works with dashes', () => {
        let res = fix_paths_1.fixPaths('/a/b/c', '/a/b/c/packages/p', 'Testing (/a/b/c/packages/test-package/src/file.ts:12');
        expect(res).toEqual('Testing (/a/b/c/packages/test-package/src/file.ts:12');
    });
});
//# sourceMappingURL=fix-paths.spec.js.map